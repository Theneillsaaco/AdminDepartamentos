@page "/inquilino/{id:int}"

@using AdminDepartamentos.App.Models.InquilinoModels

@inject InquilinoService InquilinoService
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject SweetAlertService Swal

<h3 class="text-center mt-4 mb-4" inert>Detalles</h3>

@if (_inquilinoGetByIdModel is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando informacion del inquilino...</p>
    </div>
}
else
{
    <div class="card md-4 shadow-sm">
        <div class="card-header">
            <strong inert>Detalles del Inquilino</strong>
        </div>
        <div class="card-body">
            <p><strong inert>Nombre:</strong> @_inquilinoGetByIdModel.FirstName</p>
            <p><strong inert>Apellido:</strong> @_inquilinoGetByIdModel.LastName</p>
            <p><strong inert>Cedula:</strong> @_inquilinoGetByIdModel.Cedula</p>
            <p><strong inert>Numero de Departamento:</strong> @_inquilinoGetByIdModel.NumDepartamento</p>
            <p><strong inert>Numero de Telefono:</strong> @_inquilinoGetByIdModel.NumTelefono</p>
            <p><strong inert>Dia de Creacion:</strong> @_inquilinoGetByIdModel.CreationDate.ToString("yy-MM-dd")</p>
            <p><strong inert>Dia de Modificacion:</strong> @_inquilinoGetByIdModel.ModifyDate</p>
        </div>
    </div>
    
    <div class="card shadow-sm">
        <div class="card-header">
            <strong inert>Editar Inquilino</strong>
        </div>
        <div class="card-body">
            <EditForm Model="_inquilinoUpdateModel" OnValidSubmit="UpdateInquilino">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="form-group mb-3">
                    <label for="FirstName" inert>Nombre</label>
                    <InputText id="FirstName" class="form-control" @bind-Value="_inquilinoUpdateModel.FirstName" />
                </div>
                
                <div class="form-group mb-3">
                    <label for="LastName" inert>Apellido</label>
                    <InputText id="LastName" class="form-control" @bind-Value="_inquilinoUpdateModel.LastName" />
                </div>

                <div class="form-group mb-3">
                    <label for="Cedula" inert>Cedula</label>
                    <InputText id="Cedula" class="form-control" @bind-Value="_inquilinoUpdateModel.Cedula" />
                </div>

                <div class="form-group mb-3">
                    <label for="NumDepart" inert>Numero de departamento</label>
                    <InputNumber id="NumDepart" class="form-control" @bind-Value="_inquilinoUpdateModel.NumDepartamento" />
                </div>

                <div class="form-group mb-3">
                    <label for="NumTelefono" inert>Numero de telefono</label>
                    <InputText id="NumTelefono" class="form-control" @bind-Value="_inquilinoUpdateModel.NumTelefono" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                    <button type="button" class="btn btn-secondary" @onclick="Regresar">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private InquilinoGetByIdModel _inquilinoGetByIdModel;
    private InquilinoUpdateModel _inquilinoUpdateModel;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticated())
            Navigation.NavigateTo("/login");
        
        await LoadInquilino();
    }

    private async Task LoadInquilino()
    {
        var response = await InquilinoService.GetInquilinoById(Id);
        if (response is null || !response.Success || response.Data is null )
        {
            await Swal.FireAsync("Error", response.Message, SweetAlertIcon.Error);
            Navigation.NavigateTo("/inquilinos");
            return;
        }
        
        _inquilinoGetByIdModel = response.Data;

        _inquilinoUpdateModel = new InquilinoUpdateModel
        {
            FirstName = _inquilinoGetByIdModel.FirstName,
            LastName = _inquilinoGetByIdModel.LastName,
            NumDepartamento = _inquilinoGetByIdModel.NumDepartamento,
            NumTelefono = _inquilinoGetByIdModel.NumTelefono,
            Cedula = _inquilinoGetByIdModel.Cedula
        };
    }

    private async Task UpdateInquilino()
    {
        var response = await InquilinoService.UpdateInquilino(Id, _inquilinoUpdateModel);
        if (response.Success)
        {
            await Swal.FireAsync("¡Éxito!", "El inquilino ha sido actualizado correctamente.", SweetAlertIcon.Success);
            Navigation.NavigateTo("/inquilinos");
        }
        else
            await Swal.FireAsync("Error", response.Message, SweetAlertIcon.Error);
    }
    
    private async Task Regresar()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Estas Seguro?",
            Text = "Si vuelves el progreso no se guardara",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, confirmar",
            CancelButtonText = "Cancelar"
        });
        
        if (result.IsConfirmed)
            Navigation.NavigateTo("/inquilinos");
    }
}