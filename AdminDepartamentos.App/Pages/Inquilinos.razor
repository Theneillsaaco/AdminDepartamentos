@page "/Inquilinos"

@using AdminDepartamentos.App.Models.InquilinoModels

@inject InquilinoService InquilinoService
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject SweetAlertService Swal

<h3 class="text-center mt-4 mb-4" inert>Inquilinos</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger text-center" inert>@errorMessage</div>
}

@if (inquilinoGetModel is null)
{
    <div class="text-center" inert>
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cardango inquilino...</p>
    </div>
}
else if (inquilinoGetModel.Count is 0)
{
    <p class="text-center text-muted" inert>Parece que no hay nadie aqui :(</p>
}
else
{
    <div class="row row-cols-1 row-clos-md-2 g-4">
        @foreach (var inquilino in inquilinoGetModel)
        {
            <div class="col">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@inquilino.FirstName @inquilino.LastName</h5>
                        <p class="card-text">
                            <strong inert>Numero de Departamento:</strong> @inquilino.NumDepartamento
                            <strong inert>Numero de Telefono:</strong> @inquilino.NumTelefono
                            <strong inert>Cedula:</strong> @inquilino.Cedula
                        </p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <button class="btn btn-primary btn-sm" @onclick="() => EditInquilino(inquilino.IdInquilino)">
                        <Icon Name="IconName.Search"></Icon> Detalles
                        </button>
                        <button class="btn btn-warning btn-sm" @onclick="() => MarkDeleted(inquilino.IdInquilino)">
                            <Icon Name="IconName.TrashFill"></Icon>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
@code {
    private List<InquilinoGetModel> inquilinoGetModel;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticated())
            Navigation.NavigateTo("/login");

        await LoadInquilinos();
    }

    private async Task LoadInquilinos()
    {
        var response = await InquilinoService.GetInquilino();
        if (response.Success)
            inquilinoGetModel = response.Data;
        else
            errorMessage = response.Message;
    }

    private void EditInquilino(int idInquilino)
    {
        Navigation.NavigateTo($"/inquilino/{idInquilino}");
    }

    private async Task MarkDeleted(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Estas Seguro?",
            Text = "Esta accion borrara permanentemente el Inquilino y el Pago por igual.",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, confirmar",
            CancelButtonText = "Cancelar"
        });

        if (result.IsConfirmed)
        {
            var response = await InquilinoService.DeleteInquilino(id);
            if (response.Success)
            {
                await Swal.FireAsync("Exito!", "El Inquilino  y el Pago fue borrado exitosamente.", SweetAlertIcon.Success);
                await LoadInquilinos();
            }
            else
                await Swal.FireAsync("Error", response.Message, SweetAlertIcon.Error);
        }
    }
}